#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'

require 'pry'
require 'cap'
require 'cap/client'
require 'cap/vivo'

# init configs
config = Cap.configuration

# client will load profile data from a local repo; if it is empty, it
# can be populated from the CAP API using `client.get_profiles`.  The
# profile data is available in `client.profiles`.
client = Cap::Client::Client.new
if config.cap_replace
  client.repo_clean
  client.get_profiles
end
profile_ids = client.profile_ids

if config.cap_testing
  # Load profiles used to test CAP to VIVO conversions.
  # #test_profiles method returns an array of profileId values.
  require_relative 'cap_sample_profiles'
  if test_profiles.nil? || test_profiles.empty?
    test_ids = profile_ids.sample(20)
  else
    test_ids = test_profiles.select {|id| profile_ids.include? id}
  end
else
  test_ids = nil
end

# # ORGS
# # Convert all the CAP API education organizations into VIVO linked data.
# include Cap::Vivo::Orgs
# orgs_graph = RDF::Graph.new
# orgs = client.education_org_names.sample(100)
# orgs.each {|o| orgs_graph << org_strings2things(o) }
# File.open('orgs.ttl','w').write(orgs_graph.to_ttl)

# # Degrees
# # Convert all the CAP API education degrees into VIVO linked data.
# include Cap::Vivo::Degrees
# degrees_graph = RDF::Graph.new
# degrees = client.education_degrees
# degrees.map {|d| degrees_graph << degree_strings2things(d) }
# File.open('degrees.ttl','w').write(degrees_graph.to_ttl)

# # Exploring mapping CAP degree labels to VIVO abbreviations
# include Cap::Vivo::Degrees
# degrees = client.education_degrees
# # degrees.map {|d| [degree_acronyms(d), d]}

# binding.pry
# exit!



# Convert all the CAP API profiles into VIVO linked data and
# store it in the CAP_REPO_4STORE triple store.
ids = test_ids || profile_ids


if config.rdf_replace
  puts 'Replacing all VIVO linked data'
  config.rdf_repo.clear
else
  puts 'Adding VIVO linked data'
  q = 'SELECT ?person WHERE { ?person a <http://xmlns.com/foaf/0.1/Person> }'
  r = config.rdf_repo.client.query(q)
  vivo_uris = r.map {|s| s[:person]}
  vivo_ids = vivo_uris.map {|uri| uri.to_s.split('/').last.to_i }
  ids.delete_if {|id| vivo_ids.include? id }
end
puts "Processing #{ids.length} CAP profiles:"
count = 0
start = Time.now.to_i
ids.each do |id|
  count += 1
  profile = client.profile(id)
  begin
    # mapper = Cap::Vivo::Mapper.new profile
    mapper = Cap::Vivo::Profile.new profile
    mapper.vivo
    mapper.save
    if count % 50 == 0
      delay = (Time.now.to_i - start) / 60.0
      printf "\ncompleted %4d of %d (%5.1f min)\n", count, ids.length, delay
    else
      printf '.'
    end
  rescue => e
    delay = Time.now.to_i - start
    puts
    msg = sprintf "FAILED profileId %d (%d of %d)\n", id, count, ids.length
    msg += e.message
    puts msg
    puts
    config.logger.error(msg)
  end
end
puts
